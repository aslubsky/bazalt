<?phperror_reporting(E_ALL & ~E_DEPRECATED | E_STRICT);ini_set('display_errors', 'on');ini_set('display_startup_errors', 'on');ini_set('report_memleaks', 'on');define('DEBUG', true);define('CACHE', true);// define('SITE_DIR', realpath(dirname(__FILE__).'/')); // no trailing slashdefine('SITE_DIR', realpath(dirname(__FILE__).'/../../../../')); // no trailing slash/** * Include BAZALT framework * * .htaccess or httpd.conf, etc... * - SetEnv BAZALT_FRAMEWORK /path/to/framework */require_once (is_dir(SITE_DIR . '/framework') ? (SITE_DIR . '/framework') : getenv('BAZALT_FRAMEWORK')) . '/core/include.inc';error_reporting(E_ALL & ~E_DEPRECATED | E_STRICT);using('Framework.System.Cache');Cache::Singleton()->salt('PerformanceTest'); // cache salt, for memcacheclass PerformanceTest {    protected $count;    protected $storage = null;    protected $time = null;    protected $memory = null;        public function __construct($adapter, $options = array())    {        print "\n\n" .'Cache test. Adapter - '.$adapter."\n";        Cache::Singleton()->initCache($adapter, $options);        Cache::Singleton()->clearCache();        $this->memory = memory_get_usage();    }    protected function timeMeasure()    {        list($msec, $sec) = explode(chr(32), microtime());        return ($sec+$msec);    }        protected function startTime()     {        $this->time = $this->timeMeasure();    }    protected function endTime($task)     {        echo $task .' done at ' . round($this->timeMeasure() - $this->time, 6)." s\n";    }        protected function testGetIfNotDefined()    {        $this->startTime();        for($i=1; $i<=$this->count; $i++) {            if(Cache::Singleton()->getCache($i) !== false) {                exit('Get if not defined - $cache->getCache('.$i.') !== false');            }        }        $this->endTime('Get if not defined');    }        protected function testSet()     {        $tags = array();        $this->startTime();        for($i=1; $i<=$this->count; $i++) {            $tag = 'tag'.rand (0, $this->count);            $tags[$i] = $tag;            Cache::Singleton()->setCache($i, array(                'foo' => time()            ), false, array($tag));        }        $this->endTime('Set '.$this->count.' items');        $tagsForTest = array();        foreach($tags as $id => $tag) {            $ids = array_keys($tags, $tag);            if(count($ids) > 1) {                $tagsForTest[$tag] = $ids;            }            if(count($tagsForTest) > 10) {                break;            }        }        if(count($tagsForTest) < 10) {            for($i=1; $i<=$this->count; $i++) {                if(!isset($tagsForTest[$tags[$i]])) {                    $tagsForTest[$tags[$i]] = array($i);                }                if(count($tagsForTest) > 10) {                    break;                }            }        }        return $tagsForTest;    }        protected function testGet()    {        $this->startTime();        for($i=1; $i<=$this->count; $i++) {            $res = Cache::Singleton()->getCache($i);            if($res === false) {                exit('Get by id - $cache->getCache('.$i.') === false');            }        }        $this->endTime('Get '.$this->count.' items by id');    }        protected function testRemoveByTag($tags)    {        $this->startTime();        foreach($tags as $tag => $ids) {            Cache::Singleton()->removeByTag($tag);            foreach($ids as $id) {                if(Cache::Singleton()->getCache($id) !== false) {                    exit('Remove by tag "'.$tag.' ('.implode(',', $ids).')" - $cache->getCache('.$id.') !== false');                }            }        }        $this->endTime('Test remove by tags');    }        public function runTests($count)    {        $this->count = $count;        // $this->testGetIfNotDefined();        $tags = $this->testSet();        $this->testGet();        $this->testRemoveByTag($tags);                echo 'Memory used - '.( memory_get_usage() - $this->memory)." bytes\n";    }}$count = 0;if(isset($argv[1]) && strstr($argv[1], '--c=') !== false) {    $count = explode('=', $argv[1]);    $count = (int)$count[1];}if(!$count) {    exit('Please set tests count by --c option (--c=100)'."\n");}// $pt2 = new PerformanceTest('Cache_Mongo_Adapter', array());// $pt2->runTests($count);$pt = new PerformanceTest('Cache_Memcache_Adapter', array('host' => 'localhost', 'port' => 11211));$pt->runTests($count);?>