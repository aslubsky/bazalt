<?php

using('Framework.System.Html');

class TestElement extends Html_Element
{
    public $eventOnChange = Event::EMPTY_EVENT;

    public function prependsName()
    {
        return parent::prependsName();
    }

    public function toString()
    {
        return 'test';
    }

    public function change($text)
    {
        $this->OnChange($this, $text);
    }
}

class HtmlTest_Element extends Test_BaseCase
{
    protected $form = null;

    protected $element = null;

    public function setUp()
    {
        $this->element = new TestElement('uniqueid', array('class' => 'css-class', 'style' => 'display: none'));
    }

    public function testToString()
    {
        $str = $this->element->toString();
        $this->assertEquals('test', $str);

        $str = $this->element->__toString();
        $this->assertEquals('test', $str);
    }

    /**
     * @covers Html_Element::id
     */
    public function testId()
    {
        $str = $this->element->id();
        $this->assertEquals('uniqueid', $str);

        $this->element->id('test-id');

        $str = $this->element->id();
        $this->assertEquals('test-id', $str);

        $this->element->id('uniqueid');
    }

    /**
     * @expectedException Html_Exception_Element
     */
    public function testEmptyName()
    {
        $element = new TestElement(null);
        $id = $element->id();

        $this->assertEquals($id, 'unique_test');
    }

    /**
     * @expectedException Html_Exception_Element
     */
    public function testInvalidName()
    {
        $element = new TestElement('invalid name!');
    }

    /**
     * @expectedException Html_Exception_Attribute
     */
    public function testValidateAttributeBooleanException()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'boolean');

        $element->test('123');
    }

    public function testValidateAttributeInt()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'int');

        $element->test('123');

        $this->assertEquals(123, $element->test());
    }

    /**
     * @expectedException Html_Exception_Attribute
     */
    public function testValidateAttributeIntException()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'int');

        $element->test('123d');
    }

    public function testValidateAttributeBoolean()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('checked', 'boolean');

        $element->checked(true);

        $this->assertEquals(true, $element->checked());
    }

    /**
     * @expectedException Html_Exception_Attribute
     */
    public function testValidateAttributeArrayElementException()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', array('test1', 'test2', 'test3'));

        $element->test('test1');

        $element->test('test4');
    }

    public function testValidateAttributeArray()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'array');

        $value = array('test' => '123');
        $element->test($value);

        $this->assertEquals($value, $element->test());
    }

    /**
     * @expectedException Html_Exception_Attribute
     */
    public function testValidateAttributeArrayException()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'array');

        $element->test('test1');
    }

    public function testValidateAttributeMixed()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'mixed');

        $element->test('asd');

        $this->assertEquals('asd', $element->test());
    }

    /**
     * @expectedException Html_Exception_Attribute
     */
    public function testValidateAttributeStringException()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'string');

        $element->test(array('123'));
    }

    /**
     * @expectedException Html_Exception_Attribute
     */
    public function testValidateAttributeUnknownException()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'unknown');

        $element->test(array('123'));
    }

    public function testValidateAttributeObject()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'object');

        $element->test($element);

        $this->assertSame($element, $element->test());
    }

    /**
     * @expectedException Html_Exception_Attribute
     */
    public function testValidateAttributeObjectException()
    {
        $element = new TestElement('test_element');

        $element->validAttribute('test', 'object');

        $element->test($element);

        $element->test(array('123'));
    }

    /**
     * @expectedException Html_Exception_Attribute
     */
    public function testAttributeException()
    {
        $element = new TestElement('test_element');

        $element->test('123d');
    }

    public function testEvents()
    {
        $element = new TestElement('test_element');

        $element->OnChange->add(array($this, 'eventsCallback'));

        $element->change('test');
    }

    public function eventsCallback($el, $text)
    {
        $this->assertEquals($text, 'test');
    }

    /**
     * @covers Html_Element::getValidAttributes
     * @covers Html_Element::validAttribute
     * @covers Html_Element::invalidAttribute
     */
    public function testValidAttributes()
    {
        $attrs = array(
            'accesskey' => 'string',
            'class'     => 'string',
            'dir'       => array('rtl', 'ltr'),
            'id'        => 'string',
            'lang'      => 'string',
            'style'     => 'string',
            'tabindex'  => 'int',
            'title'     => 'string'
        );

        $str = $this->element->getValidAttributes();
        $this->assertEquals($attrs, $str);

        $this->element->validAttribute('test');
        
        $attrs2 = $attrs;
        $attrs2['test'] = 'string';

        $str = $this->element->getValidAttributes();
        $this->assertEquals($attrs2, $str);

        $this->element->validAttribute('test');

        $str = $this->element->getValidAttributes();
        $this->assertEquals($attrs2, $str);

        $this->element->invalidAttribute('test');

        $str = $this->element->getValidAttributes();
        $this->assertEquals($attrs, $str);
    }

    /**
     * @covers Html_Element::prependsName
     */
    public function testPrependsName()
    {
        $this->assertEquals(true, $this->element->prependsName());

        $this->element->name(null);

        $this->assertEquals(false, $this->element->prependsName());

        $this->element->name('uniqueid');
    }

    /**
     * @covers Html_Element::name
     */
    public function testName()
    {
        $this->assertEquals('uniqueid', $this->element->name());

        $this->element->name(null);

        $this->assertEquals(null, $this->element->name());

        $this->element->name('uniqueid');

        $this->assertEquals('uniqueid', $this->element->name());
    }

    /**
     * @covers Html_Element::getAttributesString
     */
    public function testGetAttributesString()
    {
        $element = new TestElement('unique', array('class' => 'css-class', 'style' => 'display: none'));
        $str = $element->getAttributesString();

        $this->assertEquals('class="css-class" id="unique" style="display: none"', $str);

        $element->validAttribute('test', 'string', false);
        $element->test('123');
        $str = $element->getAttributesString();

        $this->assertEquals('class="css-class" id="unique" style="display: none"', $str);

        $element->validAttribute('test', 'string');
        $str = $element->getAttributesString();

        $this->assertEquals('class="css-class" id="unique" style="display: none" test="123"', $str);
    }

    /**
     * @covers Html_Element::addClass
     * @covers Html_Element::removeClass
     * @covers Html_Element::css
     * @covers Html_Element::hasClass
     */
    public function testCssClass()
    {
        $this->element->addClass('test test2  test3');
        $arr = array('css-class', 'test', 'test2', 'test3');

        $this->assertEquals($arr, $this->element->css());

        $this->element->addClass('test4 test5');
        $arr = array('css-class', 'test', 'test2', 'test3', 'test4', 'test5');

        $this->assertEquals($arr, $this->element->css());

        $this->assertEquals(true, $this->element->hasClass('test'));

        $this->assertEquals(false, $this->element->hasClass('unknown-css'));

        $this->element->removeClass('test4 test5');
        $arr = array('css-class', 'test', 'test2', 'test3');

        $this->assertEquals($arr, $this->element->css());

        $this->element->removeClass('test   test2 test3');
        $arr = array('css-class');

        $this->assertEquals($arr, $this->element->css());
    }

    public function testView()
    {
        $view = $this->element->view();
        $this->assertEquals(Html_Form::getView()->getFolders(), $view->getFolders());

        $newView = new View_Base(array('test' => FRAMEWORK_DIR));
        $this->element->view($newView);
        $this->assertEquals(array(
            'Html' => FRAMEWORK_DIR . '/system/html/templates',
            'test' => FRAMEWORK_DIR
        ), $this->element->view()->getFolders());
    }

    /**
     * @covers Html_Element::generateId
     */
    public function testGenerateId()
    {
        $id = Html_Element::generateId('test');

        $this->assertEquals('test', $id);

        $id = Html_Element::generateId('test');

        $this->assertEquals('test_0', $id);

        $id = Html_Element::generateId('test');

        $this->assertEquals('test_1', $id);

        $id = Html_Element::generateId('test2');

        $this->assertEquals('test2', $id);

        $id = Html_Element::generateId('test2');

        $this->assertEquals('test2_0', $id);

        $id = Html_Element::generateId();

        $this->assertEquals('bzauto_0', $id);

        $id = Html_Element::generateId('test[name]');

        $this->assertEquals('test_name', $id);

        $id = Html_Element::generateId('test[]');

        $this->assertEquals('test_namf', $id);

        $id = Html_Element::generateId('test[]');

        $this->assertEquals('test_namg', $id);

        $id = Html_Element::generateId('test[][]');

        $this->assertEquals('test_namh_0', $id);

        $id = Html_Element::generateId('test[][test]');

        $this->assertEquals('test_nami_test', $id);
    }

    /**
     * @covers Html_Element::__clone
     */
    public function testClone()
    {
        $element = new TestElement('unique_test');
        $id = $element->id();

        $this->assertEquals($id, 'unique_test');

        $element2 = clone $element;
        $id = $element2->id();

        $this->assertEquals($id, 'unique_test_0');
    }
}