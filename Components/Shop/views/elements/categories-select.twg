{% jslib 'jsTree' %}

{% if element.checkboxes() %}
<style>
.tree-wraper {
	float: left;
}
</style>

<div style="float: left; width: 300px; display: none">
<h3>{% tr %}Selected categories:{% endtr %}</h3>

{% for category in categories %}
<label>
	<input type="checkbox" data-id="{{ category.id }}" name="{{ element.name() }}[check_{{ category.id }}]" value="{{ category.id }}" checked="checked" class="selectedCategories" id="category_hidden_check_{{ category.id }}" />
	{{ category.title }}
</label>
{% endfor %}
</div>
{% endif %}

<div class="tree-wraper" style="width: 300px; float: left;">
    <div class="btn-group">
          <button data-toggle="dropdown" class="btn dropdown-toggle">{% tr %}Categories{% endtr %} <span class="caret"></span></button>
          <ul class="dropdown-menu">
            <li><a href="#" onclick="javascript: $('#tree-container').jstree('open_all', -1); return false;">{% tr %}Expand all{% endtr %}</a></li>
            <li><a href="#" onclick="javascript: $('#tree-container').jstree('close_all', -1); return false;">{% tr %}Collapse all{% endtr %}</a></li>
          </ul>
    </div>
    
    <div class="clearfix"></div>
    <div id="tree-container" class="jstree-default"></div>
</div>

<script type="text/javascript">
$(function() {    
    var tree = $('#tree-container');
    tree.jstree({
            themes : { 
                theme : "bootstrap", 
                url : false,
                dots : true,
                icons : true
            },
            'languages' : [{% for language in languages %}"{{ language.alias }}"{% if not loop.last %}, {% endif %}{% endfor %}],

            // the list of plugins to include
            'plugins' : [ "themes", {% if element.checkboxes() %},"checkbox","contextmenu"{% endif %}, "dnd", 'languages', "json_rpc", "ui", "crrm", "search", "hotkeys" ],
            // Plugin configuration

        'json_rpc' : {
            webservice : ComEcommerce_Webservice_TreeCategories,
            root: {{ category.id }}
        },
            // I usually configure the plugin that handles the data first - in this case JSON as it is most common
            'json_data' : { 
                // I chose an ajax enabled tree - again - as this is most common, and maybe a bit more complex
                // All the options are the same as jQuery's except for `data` which CAN (not should) be a function
                'ajax' : {
                    'type': 'POST',
                    // the URL to fetch the data
                    "url" : ComEcommerce_Webservice_TreeCategories.scriptUrl,
                    // this function is executed in the instance's scope (this refers to the tree instance)
                    // the parameter is the node being loaded (may be -1, 0, or undefined when loading the root nodes)
                    "data" : function (n) { 
                        // the result is fed to the AJAX request `data` option
                        return {
                            'method' : 'getItem', 
                            'arg0' : n.attr ? n.attr("id").replace("node_","") : {{ category.id }},
                            'argCount': 1
                        }; 
                    }
                }
            },
            'contextmenu' : {
            },
            {% if not element.checkboxes() %}
            "dnd" : {
                "drop_finish" : function () {
                    //alert("DROP");
                },
                "drag_check" : function (data) {
                    if(data.r.attr("id") == "phtml_1") {
                        return false;
                    }
                    return {
                        after : false,
                        before : false,
                        inside : true
                    };
                },
                "drag_finish" : function (data) {
                    var categoryId = $(data.r[0]).attr('id').slice(5),
                        id = $(data.o).data('id');
                    $(data.o).parents('tr:first').remove();
                    ComEcommerce_Webservice_TreeCategories.moveProduct(id, categoryId, function() {
                        
                    });
                }
            },
            {% endif %}
            // Using types - most of the time this is an overkill
            // Still meny people use them - here is how
            "types" : {
                // I set both options to -2, as I do not need depth and children count checking
                // Those two checks may slow jstree a lot, so use only when needed
                "max_depth" : -2,
                "max_children" : -2,
                // I want only `drive` nodes to be root nodes 
                // This will prevent moving or creating any other type as a root node
                "valid_children" : [ "drive" ],
                "types" : {
                    // The default type
                    "default" : {
                        // I want this type to have no children (so only leaf nodes)
                        // In my case - those are files
                        "valid_children" : "none",
                        // If we specify an icon for the default type it WILL OVERRIDE the theme icons
                        "icon" : {
                            "image" : "./file.png"
                        }
                    },
                    // The `folder` type
                    "folder" : {
                        // can have files and other folders inside of it, but NOT `drive` nodes
                        "valid_children" : [ "default", "folder" ]/*,
                        "icon" : {
                            "image" : "./folder.png"
                        }*/
                    },
                    // The `drive` nodes 
                    "drive" : {
                        // can have files and folders inside, but NOT other `drive` nodes
                        "valid_children" : [ "default", "folder" ],/*
                        "icon" : {
                            "image" : "./root.png"
                        },*/
                        // those options prevent the functions with the same name to be used on the `drive` type nodes
                        // internally the `before` event is used
                        "start_drag" : false,
                        "move_node" : false,
                        "delete_node" : false,
                        "remove" : false
                    }
                }
            },
            // For UI & core - the nodes to initially select and open will be overwritten by the cookie plugin

            // the UI plugin - it handles selecting/deselecting/hovering nodes
            "ui" : {
                // this makes the node with ID node_4 selected onload
            },
            // the core plugin - not many options here
            "core" : {
                'animation' : 0
                // just open those two nodes up
                // as this is an AJAX enabled tree, both will be downloaded from the server
                //"initially_open" : [ "node_1" ] 
            }{% if element.checkboxes() %},
            'checkbox': {
                'two_state': true,
                'real_checkboxes': true,
                'real_checkboxes_names': function (n) {
                    return [("{{ element.name() }}[check_" + (n[0].id || Math.ceil(Math.random() * 10000)) + "]"), n[0].id.slice(5)]; 
                }
            }{% endif %}
        })
        .bind('load_node.jstree', function (e, data) {
			$('.selectedCategories:checked').each(function() {
				data.inst.check_node($('#node_' + $(this).data('id')));
			});
            
            return true; 
        })
        .bind('change_state.jstree', function (e, data) {
            var node = data.inst._get_node(data.rslt),
                unchecked = data.args[1];
                if (node) {
                    var id = node.attr('id').slice(5),
                    checkbox = $('#category_hidden_check_' + id);
                    if (unchecked) {
                        checkbox.removeAttr('checked');
                    } else {
                        checkbox.attr('checked', 'checked');
                    }
                }
            return true; 
        }){% if not element.checkboxes() %}
        .bind('select_node.jstree', function (e, data) {
            var id = data.rslt.obj.attr("id").replace("node_","");
            $.bz.forms.list.elements.table.LoadByCategory(id, function(result) {
                //$('#list_categoriet').replaceWith(info);
				$($.bz.forms.list.elements.table.el).html(result);
				$.bz.forms.list.elements.table.onUpdateData();
            });
			$.bz.forms.list.elements.table.updateData = function() {
				var self = $.bz.forms.list.elements.table;
				self.GetPageCategory(id, self.page, self.sortColumn, self.sortDirection, function(result) {
					$('.tipsy').remove();
					$($.bz.forms.list.elements.table.el).html(result);
					self.onUpdateData();
				});
			};
        });
		{% endif %}

    {% if selectId %}
    if ($.bz.forms.list) {
        $.bz.forms.list.elements.table.updateData = function() {
            var self = $.bz.forms.list.elements.table;
            self.GetPageCategory('{{ selectId }}', self.page, self.sortColumn, self.sortDirection, function(result) {
                $('.tipsy').remove();
                $($.bz.forms.list.elements.table.el).html(result);
                self.onUpdateData();
            });
        };
    }
    {% endif %}
    $('body').bind('bazalt_language_change', function(e, lang) {
        tree.jstree('set_lang', lang.alias);
    });
	$('.selectedCategories').click(function() {
		
	});
});
</script>