{% jslib 'jsTree' %}

<div class="page-header">
<h1>
    {% tr %}Categories{% endtr %}

    <div class="ui-float-right">
        <bz:languages />
    </div>
</h1>
</div>

<div class="tree-edit-dialog" style="margin-left: -300px; width: 100%; float: right;">
    <div style="padding-left: 300px;">
        <div style="border-left: 1px solid #DDDDDD;">
            <div id="tree-edit-form" style="padding: 10px 20px 0; position: relative; display: none;">
                {{ form|raw }}

                <div class="bz-overlay"></div>
            </div>
        </div>
    </div>
</div>

<div class="tree-wraper" style="width: 300px; float: left;">
    <div class="btn-group">
          <button data-toggle="dropdown" class="btn dropdown-toggle">{% tr %}Categories{% endtr %} <span class="caret"></span></button>
          <ul class="dropdown-menu">
            <li><a href="#" onclick="javascript: $('#tree-container').jstree('create',-1, 'first'); return false;">{% tr %}Create category{% endtr %}</a></li>
            <li class="divider"></li>
            <li><a href="#" onclick="javascript: $('#tree-container').jstree('open_all', -1); return false;">{% tr %}Expand all{% endtr %}</a></li>
            <li><a href="#" onclick="javascript: $('#tree-container').jstree('close_all', -1); return false;">{% tr %}Collapse all{% endtr %}</a></li>
          </ul>
    </div>
    
    <div class="clearfix"></div>
    <div id="tree-container" class="jstree-default"></div>
</div>


<div class="clearfix"></div>

<script type="text/javascript">
$(function() {
    var tree = $('#tree-container');
    tree.jstree({
            themes : { 
                theme : "bootstrap", 
                url : false,
                dots : true,
                icons : true
            },
            'languages' : [{% for language in languages %}"{{ language.alias }}"{% if not loop.last %}, {% endif %}{% endfor %}],

            // the list of plugins to include
            'plugins' : [ "themes", /*"checkbox",*/ 'languages', "json_rpc", "ui", "crrm", "cookies", "search", "hotkeys", "contextmenu", "dnd" ],
            // Plugin configuration

            'json_rpc' : {
                webservice : ComEcommerce_Webservice_TreeCategories,
                root: {{ rootCategory.id }}
            },
            'contextmenu' : {
                'items': {
                    "create" : {
                        // The item label
                        "label"             : "Create",
                        // The function to execute upon a click
                        "action"            : function (obj) { this.create(obj, 'first'); },
                        // All below are optional
                        "_disabled"         : false,     // clicking the item won't do a thing
                        "_class"            : "class",  // class is applied to the item LI node
                        "separator_before"  : false,    // Insert a separator before the item
                        "separator_after"   : false,     // Insert a separator after the item
                        // false or string - if does not contain `/` - used as classname
                        "icon"              : false
                    },
                    "rename" : {
                        // The item label
                        "label"             : "Rename",
                        // The function to execute upon a click
                        "action"            : function (obj) { this.rename(obj); },
                        // All below are optional
                        "_disabled"         : false,     // clicking the item won't do a thing
                        "_class"            : "class",  // class is applied to the item LI node
                        "separator_before"  : false,    // Insert a separator before the item
                        "separator_after"   : true,     // Insert a separator after the item
                        // false or string - if does not contain `/` - used as classname
                        "icon"              : false /*,
                        "submenu"           : {
                        }*/
                    }
                }
            },
            "dnd" : {
                "drop_finish" : function () {
                    alert("DROP");
                },
                "drag_check" : function (data) {
                   /*if(data.r.attr("id") == "node_1") {
                       return false;
                   }*/
                    return {
                        after : false,
                        before : false,
                        inside : true
                    };
                },
                "drag_finish" : function () {
                    alert("DRAG OK");
                }
            },
            // Configuring the search plugin
            "search" : {
                // As this has been a common question - async search
                // Same as above - the `ajax` config option is actually jQuery's object (only `data` can be a function)
                "ajax" : {
                    "url" : ComEcommerce_Webservice_TreeCategories.scriptUrl,
                    // You get the search string as a parameter
                    "data" : function (str) {
                        return { 
                            "operation" : "search", 
                            "search_str" : str 
                        }; 
                    }
                }
            },
            // Using types - most of the time this is an overkill
            // Still meny people use them - here is how
            "types" : {
                // I set both options to -2, as I do not need depth and children count checking
                // Those two checks may slow jstree a lot, so use only when needed
                "max_depth" : -2,
                "max_children" : -2,
                // I want only `drive` nodes to be root nodes 
                // This will prevent moving or creating any other type as a root node
                "valid_children" : [ "drive" ],
                "types" : {
                    // The default type
                    "default" : {
                        // I want this type to have no children (so only leaf nodes)
                        // In my case - those are files
                        "valid_children" : "none",
                        // If we specify an icon for the default type it WILL OVERRIDE the theme icons
                        "icon" : {
                            "image" : "./file.png"
                        }
                    },
                    // The `folder` type
                    "folder" : {
                        // can have files and other folders inside of it, but NOT `drive` nodes
                        "valid_children" : [ "default", "folder" ]/*,
                        "icon" : {
                            "image" : "./folder.png"
                        }*/
                    },
                    // The `drive` nodes 
                    "drive" : {
                        // can have files and folders inside, but NOT other `drive` nodes
                        "valid_children" : [ "default", "folder" ],/*
                        "icon" : {
                            "image" : "./root.png"
                        },*/
                        // those options prevent the functions with the same name to be used on the `drive` type nodes
                        // internally the `before` event is used
                        "start_drag" : false,
                        "move_node" : false,
                        "delete_node" : false,
                        "remove" : false
                    }
                }
            },
            // For UI & core - the nodes to initially select and open will be overwritten by the cookie plugin

            // the UI plugin - it handles selecting/deselecting/hovering nodes
            "ui" : {
                // this makes the node with ID node_4 selected onload
                //"initially_select" : [  ]
            },
            // the core plugin - not many options here
            "core" : {
                'animation' : 0
                // just open those two nodes up
                // as this is an AJAX enabled tree, both will be downloaded from the server
                //"initially_open" : [ "node_1" ] 
            }
        })
        .bind("create.jstree", function (e, data) {
            var parentId = -1;
            if (data.rslt.parent != -1) {
                parentId = data.rslt.parent.attr("id").replace("node_","");
            }
            ComEcommerce_Webservice_TreeCategories.createNode(parentId, {{ rootCategory.id }}, data.rslt.name, data.rslt.obj.attr("rel"), function(r) {
                if(r.status) {
                    $(data.rslt.obj).attr("id", "node_" + r.id);
                }
                else {
                    $.jstree.rollback(data.rlbk);
                }
            });
        })
        .bind("remove.jstree", function (e, data) {
            data.rslt.obj.each(function () {
                var id = this.id.replace("node_","");
                ComEcommerce_Webservice_TreeCategories.removeNode(id, function(r) {
                    if(!r.status) {
                        data.inst.refresh();
                    }
                });
            });
        })
        .bind("rename.jstree", function (e, data) {
            var id = data.rslt.obj.attr('id').replace('node_', ''),
                lang = tree.jstree('get_lang'),
                title = data.rslt.new_name;

            ComEcommerce_Webservice_TreeCategories.renameNode(id, title, lang, function(r) {
                if(!r.status) {
                    $.jstree.rollback(data.rlbk);
                }
            });
        })
        .bind('move_node.jstree', function (e, data) {
            data.rslt.o.each(function (i) {
                var id       = $(this).attr("id").replace("node_",""),
                    isCopy   = data.rslt.cy ? true : false,
                    prev = $(this).prev(),
                    prevId = null,
                    isInsert = false;

                if (prev.size() > 0) {
                    prevId = prev.attr("id").replace("node_","");
                } else {
                    var parents = $(this).parents('.jstree-open, .jstree-leaf');
                    if (parents.size() > 0) {
                        var inner = $(this).parents('.jstree-open, .jstree-leaf').eq(0);
                        prevId = inner.attr("id").replace("node_","");
                    }
                    isInsert = true;
                }
                ComEcommerce_Webservice_TreeCategories.moveNode(id, prevId, isInsert, isCopy, function(r) {
                    if (!r.status) {
                        $.jstree.rollback(data.rlbk);
                    } else {
                        $(data.rslt.oc).attr("id", "node_" + r.id);
                        if (data.rslt.cy && $(data.rslt.oc).children("UL").length) {
                            data.inst.refresh(data.inst._get_parent(data.rslt.oc));
                        }
                    }
                });
            });
        })
        .bind('select_node.jstree', function (e, data) {
            var id = data.rslt.obj.attr("id").replace("node_","");
            //$('.tree-edit-dialog').hide();
            $('#save_info').data('node', data.rslt.obj);

            $('#tree-edit-form .bz-overlay').show();

            $.bz.forms.category.LoadInfo(id, function(result) {
                var form = $(result);
                $('#tree-edit-form').show();
                $('#tree-edit-form .bz-overlay').hide();
                $($.bz.forms.category.el).replaceWith(form);
                form.data('itemId', id);
            })
        })
        .bind('load_node.jstree', function (e, data) {
            var node = (data.rslt.obj != -1) ? data.rslt.obj : $('.jstree');
            var rxOverlay = new RegExp(/(?:overlay-\w+)+/);
            $(node).find("ul > li").each(function() {
                var m = rxOverlay.exec($(this).attr("class"));
                var c = "overlay ";
                if (m != null) {
                    for (i = 0; i < m.length; i++) {
                        c += m[i] + " ";
                    }
                }
                $(this).children("a:first").before("<div class='" + c + "'></div>");
            });

            return true; 
        });

    $('#category_Html_Element_Group_submit').live('click', function() {
        var form = $('#category'),
            data = $.bz.forms.category.serialize(),
            id = $($.bz.forms.category.el).data('itemId'),
            btn = $(this);

        btn.button('loading');
        $.bz.forms.category.Save(id, data, function(result) {
            var form = $($.bz.forms.category.el);
            $('#category').replaceWith(form);
            form.data('itemId', id);
            btn.button('reset');
        });
        return false;
    });
    $('body').bind('bazalt_language_change', function(e, lang) {
        tree.jstree('set_lang', lang.alias);
    });
});
</script>
