<bz:header>
    {% tr %}Products types{% endtr %}

    <div class="ui-float-right">
        <bz:languages />
    </div>
</bz:header>


{% jslib 'jsTree' %}

<div class="tree-wraper" style="width: 300px; float: left;">
    <div class="btn-group">
          <button data-toggle="dropdown" class="btn dropdown-toggle">{% tr %}Product types{% endtr %} <span class="caret"></span></button>
          <ul class="dropdown-menu">
            <li><a href="#" onclick="javascript: $('#tree-container').jstree('create',-1, 'first'); return false;">{% tr %}Create category{% endtr %}</a></li>
            <li class="divider"></li>
            <li><a href="#" onclick="javascript: $('#tree-container').jstree('open_all', -1); return false;">{% tr %}Expand all{% endtr %}</a></li>
            <li><a href="#" onclick="javascript: $('#tree-container').jstree('close_all', -1); return false;">{% tr %}Collapse all{% endtr %}</a></li>
          </ul>
    </div>
    
    <div class="clearfix"></div>
    <div id="tree-container" class="jstree-default"></div>
</div>

<div class="content-edit" style="display: none">
    <h2 class="fields-header">
        {% tr %}Fields{% endtr %}
        <bz:headerbutton url="javascript:;" icon="ui-icon-circle-plus">{% tr %}Add new field{% endtr %}</bz:headerbutton>
    </h2>

    <form>
        <div id="fields-container">
        </div>
    </form>
    
    <div class="actions">
        <a href="#" class="btn fg-button fg-button-icon-left add-new-field">
            <span class="ui-icon ui-icon-circle-plus"></span>
            {% tr %}Add new field{% endtr %}
        </a>

        <a href="#" class="btn primary save-fields" data-loading-text="{% tr %}Saving...{% endtr %}">
        {% tr %}Save{% endtr %}
        </a>
    </div>
</div>

<div class="spacer"></div>

<style>
#tree-container {
	width: 300px;
    overflow: hidden;
}
.tree-wraper {
	float: left;
}
.tree-edit-dialog {
    position: absolute;
    left: 600px;
    top: 70px;
    margin: 0;
}
.ui-lang-notcomplete {
    font-size:10px !important;
    margin:0 1px !important;
    padding:0 2px !important;
    color:#CD0A0A !important;
}
.content-edit {
	margin-left: 300px;
}
.product-fields_title, .product-fields_set_title {
	position: relative;
}
.product-type_field {
    background: #EEE;
    margin: 4px 0;
    padding: 5px;
    border: 1px solid #CCCCCC;
    display: inline-block;
    width: 100%;
    left: 0;
    box-sizing: border-box;
    position: relative;
    -webkit-box-sizing:border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
}
.product-type_field_title, .product-type_field_type {
	width: 200px;
	float: left;
}
.product-fields_title, .product-type_field_type, .product-type_field_checkboxes {
    float: left;
    margin: 2px 5px 2px 17px;
}
.product-fields_set_title input {
    margin-bottom: 2px;
}
.set-value {
    position: relative;
    margin-top: 5px;
}
.set-value .set-remove-value {
    position: absolute;
    right: -16px;
    top: 4px;
    text-indent: -1000px;
    overflow: hidden;
    width: 16px;
    height: 16px;
}
.actions {
    padding-left: 20px;
}
.set-data {
    display: none;
}
.move-handle {
    cursor: n-resize;
    left: -9px;
    position: absolute;
    top: -9px;
}
.ui-sortable {
    position: relative;
}
</style>

<script type="text/javascript">
$(function() {
    window.tree = $('#tree-container');
    tree.jstree({
            themes : { 
                theme : "bootstrap", 
                url : false,
                dots : true,
                icons : true
            },
            'languages' : [{% for language in languages %}"{{ language.alias }}"{% if not loop.last %}, {% endif %}{% endfor %}],

            // the list of plugins to include
            'plugins' : [ "themes", /*"checkbox",*/ 'languages', "json_rpc", "ui", "crrm", "cookies", "search", "hotkeys", "contextmenu", "dnd" ],
            // Plugin configuration

        'json_rpc' : {
            webservice : ComEcommerce_Webservice_TreeProductTypes,
            root: {{ root.id }}
        },
            // I usually configure the plugin that handles the data first - in this case JSON as it is most common
            'json_data' : { 
                // I chose an ajax enabled tree - again - as this is most common, and maybe a bit more complex
                // All the options are the same as jQuery's except for `data` which CAN (not should) be a function
                'ajax' : {
                    'type': 'POST',
                    // the URL to fetch the data
                    "url" : ComEcommerce_Webservice_TreeProductTypes.scriptUrl,
                    // this function is executed in the instance's scope (this refers to the tree instance)
                    // the parameter is the node being loaded (may be -1, 0, or undefined when loading the root nodes)
                    "data" : function (n) { 
                        // the result is fed to the AJAX request `data` option
                        return {
                            'method' : 'getItem', 
                            'arg0' : n.attr ? n.attr("id").replace("node_","") : {{ root.id }},
                            'argCount': 1
                        }; 
                    }
                }
            },
            'contextmenu' : {
                'items': {
                    "create" : {
                        // The item label
                        "label"             : "Create",
                        // The function to execute upon a click
                        "action"            : function (obj) { this.create(obj); },
                        // All below are optional
                        "_disabled"         : false,     // clicking the item won't do a thing
                        "_class"            : "class",  // class is applied to the item LI node
                        "separator_before"  : false,    // Insert a separator before the item
                        "separator_after"   : false,     // Insert a separator after the item
                        // false or string - if does not contain `/` - used as classname
                        "icon"              : false
                    },
                    "rename" : {
                        // The item label
                        "label"             : "Rename",
                        // The function to execute upon a click
                        "action"            : function (obj) { this.rename(obj); },
                        // All below are optional
                        "_disabled"         : false,     // clicking the item won't do a thing
                        "_class"            : "class",  // class is applied to the item LI node
                        "separator_before"  : false,    // Insert a separator before the item
                        "separator_after"   : true,     // Insert a separator after the item
                        // false or string - if does not contain `/` - used as classname
                        "icon"              : 'tree-context-rename' /*,
                        "submenu"           : {
                        }*/
                    }
                }
            },
            "dnd" : {
                "drop_finish" : function () {
                    alert("DROP");
                },
                "drag_check" : function (data) {
                   /*if(data.r.attr("id") == "node_1") {
                       return false;
                   }*/
                    return {
                        after : false,
                        before : false,
                        inside : true
                    };
                },
                "drag_finish" : function () {
                    alert("DRAG OK");
                }
            },
            // Configuring the search plugin
            "search" : {
                // As this has been a common question - async search
                // Same as above - the `ajax` config option is actually jQuery's object (only `data` can be a function)
                "ajax" : {
                    "url" : ComEcommerce_Webservice_TreeProductTypes.scriptUrl,
                    // You get the search string as a parameter
                    "data" : function (str) {
                        return { 
                            "operation" : "search", 
                            "search_str" : str 
                        }; 
                    }
                }
            },
            // Using types - most of the time this is an overkill
            // Still meny people use them - here is how
            "types" : {
                // I set both options to -2, as I do not need depth and children count checking
                // Those two checks may slow jstree a lot, so use only when needed
                "max_depth" : -2,
                "max_children" : -2,
                // I want only `drive` nodes to be root nodes 
                // This will prevent moving or creating any other type as a root node
                "valid_children" : [ "drive" ],
                "types" : {
                    // The default type
                    "default" : {
                        // I want this type to have no children (so only leaf nodes)
                        // In my case - those are files
                        "valid_children" : "none",
                        // If we specify an icon for the default type it WILL OVERRIDE the theme icons
                        "icon" : {
                            "image" : "./file.png"
                        }
                    },
                    // The `folder` type
                    "folder" : {
                        // can have files and other folders inside of it, but NOT `drive` nodes
                        "valid_children" : [ "default", "folder" ]/*,
                        "icon" : {
                            "image" : "./folder.png"
                        }*/
                    },
                    // The `drive` nodes 
                    "drive" : {
                        // can have files and folders inside, but NOT other `drive` nodes
                        "valid_children" : [ "default", "folder" ],/*
                        "icon" : {
                            "image" : "./root.png"
                        },*/
                        // those options prevent the functions with the same name to be used on the `drive` type nodes
                        // internally the `before` event is used
                        "start_drag" : false,
                        "move_node" : false,
                        "delete_node" : false,
                        "remove" : false
                    }
                }
            },
            // For UI & core - the nodes to initially select and open will be overwritten by the cookie plugin

            // the UI plugin - it handles selecting/deselecting/hovering nodes
            "ui" : {
                // this makes the node with ID node_4 selected onload
                "initially_select" : [ "node_1" ]
            },
            // the core plugin - not many options here
            "core" : {
                'animation' : 0
                // just open those two nodes up
                // as this is an AJAX enabled tree, both will be downloaded from the server
                //"initially_open" : [ "node_1" ] 
            }
        })
        .bind("create.jstree", function (e, data) {
            var parentId = -1;
            if (data.rslt.parent != -1) {
                parentId = data.rslt.parent.attr("id").replace("node_","");
            }
            ComEcommerce_Webservice_TreeProductTypes.createNode(parentId, 1, data.rslt.name, data.rslt.obj.attr("rel"), function(r) {
                if(r.status) {
                    $(data.rslt.obj).attr("id", "node_" + r.id);
                }
                else {
                    $.jstree.rollback(data.rlbk);
                }
            });
        })
        .bind("remove.jstree", function (e, data) {
            data.rslt.obj.each(function () {
                var id = this.id.replace("node_","");
                ComEcommerce_Webservice_TreeProductTypes.removeNode(id, function(r) {
                    if(!r.status) {
                        data.inst.refresh();
                    }
                });
            });
        })
        .bind("rename.jstree", function (e, data) {
            var id = data.rslt.obj.attr('id').replace('node_', ''),
                lang = tree.jstree('get_lang'),
                title = data.rslt.new_name;

            ComEcommerce_Webservice_TreeProductTypes.renameNode(id, title, lang, function(r) {
                if(!r.status) {
                    $.jstree.rollback(data.rlbk);
                }
            });
        })
        .bind('move_node.jstree', function (e, data) {
            data.rslt.o.each(function (i) {
                var id       = $(this).attr("id").replace("node_",""),
                    isCopy   = data.rslt.cy ? true : false,
                    prev = $(this).prev(),
                    prevId = null,
                    isInsert = false;

                if (prev.size() > 0) {
                    prevId = prev.attr("id").replace("node_","");
                } else {
                    var parents = $(this).parents('.jstree-open, .jstree-leaf');
                    if (parents.size() > 0) {
                        var inner = $(this).parents('.jstree-open, .jstree-leaf').eq(0);
                        prevId = inner.attr("id").replace("node_","");
                    }
                    isInsert = true;
                }
                ComEcommerce_Webservice_TreeProductTypes.moveNode(id, prevId, isInsert, isCopy, function(r) {
                    if (!r.status) {
                        $.jstree.rollback(data.rlbk);
                    } else {
                        $(data.rslt.oc).attr("id", "node_" + r.id);
                        if (data.rslt.cy && $(data.rslt.oc).children("UL").length) {
                            data.inst.refresh(data.inst._get_parent(data.rslt.oc));
                        }
                    }
                });
            });
        })
        .bind('select_node.jstree', function (e, data) {
            var id = data.rslt.obj.attr("id").replace("node_","");
            $('.tree-edit-dialog').hide();
            $('#save_info').data('node', data.rslt.obj);
            fieldsEditor.clearFields();
            $('.content-edit').hide();
            ComEcommerce_Webservice_TreeProductTypes.getItemFields(id, function(fields) {
                fieldsEditor.clearFields();
                for (var i = 0; i < fields.length; i++) {
                    var field = fields[i];
                    fieldsEditor.addField(field.id, field);
                }
                fieldsEditor.bindSortable();
                $('.content-edit').show();
                
                $('.save-fields').unbind('click').click(function() {
                    $('.save-fields').button('loading');
                    var fields = $('.content-edit form').serializeArray();
                    ComEcommerce_Webservice_TreeProductTypes.saveFields(id, fields, function() {
                        $('.save-fields').button('reset');
                    });
                    return false;
                });
            });
            /*ComCategories_Webservice_TreeCategories.getItemDetails(id, function(info) {
                $('.tree-edit-dialog').show();
                $('.tree-edit-dialog .title').text(info.title);
                $('#save_info').data('nodeInfo', info);
                if (info.is_hidden == '1') {
                    $('#is_hidden').attr('checked', 'checked');
                } else {
                    $('#is_hidden').removeAttr('checked');
                }
                if (info.is_publish == '1') {
                    $('#is_publish').attr('checked', 'checked');
                } else {
                    $('#is_publish').removeAttr('checked');
                }
            });*/
        })
        .bind('load_node.jstree', function (e, data) {
            var node = (data.rslt.obj != -1) ? data.rslt.obj : $('.jstree');
            var rxOverlay = new RegExp(/(?:overlay-\w+)+/);
            $(node).find("ul > li").each(function() {
                var m = rxOverlay.exec($(this).attr("class"));
                var c = "overlay ";
                if (m != null) {
                    for (i = 0; i < m.length; i++) {
                        c += m[i] + " ";
                    }
                }
                $(this).children("a:first").before("<div class='" + c + "'></div>");
            });

            return true; 
        });
    window.tree.jstree('set_lang', '{{ language.alias }}');

    $('body').bind('bazalt_language_change', function(e, lang) {
        window.tree.jstree('set_lang', lang.alias);
    });
});





var fieldsEditor = new function() {

    this.addNewField = function() {
        var self = this;
        ComEcommerce_Webservice_TreeProductTypes.addField($('#fields-container > div').size() - 1, function(res){
            self.addField(res.id, res);
        });
        fieldsEditor.bindSortable();
    };

    this.addField = function(elementId, field) {
        var self = this;
        if (field == undefined) {
            field = {
                'titles': {},
                'data': {}
            };
        }
        $('#FieldTpl').tmpl({
            'field' : field,
            'elementId': elementId
        }).appendTo($('#fields-container'));

        {% for language in languages %}
        $('.without-flag.{{ language.alias }} input', $('#fields-container')).after('<span style="position: absolute; top: 1px; right: 0"><span class="ico-flags {{ language.ico }} tooltip" title="{{ language.title }}"></span></span>')
            .removeClass('without-flag');
        {% endfor %}
        
        $('#fields-container .field-type').unbind('change').change(function() {
            var setCont = $(this).parent().parent().find('.set-data');
            setCont.hide();
            setCont.find('.set-value').remove();
            if($(this).val() == '4' || $(this).val() == '5') {
                self.addSetValue(setCont.find('.set-add-value'));
                setCont.show();
            }
        });
        $('#fields-container .remove-field').unbind('click').click(function() {
            $('#field-deleting').data('btn', $(this).parent()).modal({ keyboard: true, backdrop: true, show: true });
            return false;
        });
        $('.set-add-value').unbind('click').click(function() {
            self.addSetValue($(this));
        });
        $('.set-remove-value').unbind('click').click(function() {
            $(this).parent().remove();
        });
    }

    this.clearFields = function() {
        $('#fields-container').empty();
    };

    this.bindSortable = function() {
        $('#fields-container').sortable('destroy').sortable({
            handle: '.move-handle',
            axis: 'y',
            placeholder: 'placeholder',
            forcePlaceholderSize: true,
            stop: function(event, ui){
                var sortOrder = $(this).sortable('toArray');
                ComEcommerce_Webservice_TreeProductTypes.saveOrder(sortOrder);
            }
        });
    };

    this.addSetValue = function(element) {
        var self = this;
        var elId = $(element).attr('rel');
        var name = 'new' + Math.floor(Math.random() * (100000 - 1));
        element.before(
        '<div class="set-value">'+
        {% for language in languages %}
            '<div class="product-fields_set_title">' +
            '    <input type="text" name="field['+elId+'][data][' + name + '][{{language.alias}}]" class="bz-form-input ui-input"/>'+
            '    <span style="position: absolute; top: 1px; right: 0"><span class="ico-flags {{ language.ico }} tooltip" title="{{ language.title }}"></span></span>' +
            '</div>' +
        {% endfor %}
        '<a class="set-remove-value" href="javascript: void(null);" title="{% tr %}Delete option{% endtr %}"><span class="ui-icon ui-icon-trash"></span></a>'+
        '</div>');
        
        $('.set-remove-value').unbind('click').click(function() {
            $(this).parent().remove();
        });
    }

}


$(function() {
    $('.fields-header a, .add-new-field').click(function() {
        fieldsEditor.addNewField();
        return false;
    });

});
</script>

<div class="modal hide fade" id="field-deleting" style="display: none;">
    <div class="modal-header">
        <a class="close" href="#">?</a>
        <h3>{% tr %}Deleting field...{% endtr %}</h3>
    </div>
    <div class="modal-body">
        <p>{% tr %}Are you realy want to delete this field?{% endtr %}</p>
    </div>
    <div class="modal-footer">
        <a class="btn secondary" href="#" onclick="$(this).parents('.modal').modal('hide'); return false;">{% tr %}No{% endtr %}</a>
        <a class="btn primary" href="#" onclick="var el = $(this).parents('.modal').data('btn'); el.hide(100, function() { el.remove(); }); $(this).parents('.modal').modal('hide'); return false;">{% tr %}Yes{% endtr %}</a>
    </div>
</div>

<script type="text/x-jquery-tmpl" id="FieldTpl">
<div class="product-type_field ui-corner-all" id="field${elementId}">
    <span class="ui-icon ui-icon-arrowthick-2-n-s move-handle"></span>
    <a href="javascript:;" class="remove-field btn danger ui-float-right">{% tr %}Delete{% endtr %}</a>

    
    <input type="hidden" class="field_id" name="field[${elementId}][id]" value="${field.id}"/>
    
    <div class="product-type_field_title">
        <label class="bz-form-label" for="${elementId}_titles">{% tr %}Title{% endtr %}</label>
        {% for language in languages %}
        <div class="${elementId}_titles product-fields_title">
            <input type="text" name="field[${elementId}][titles][{{ language.alias }}]" value="${field.titles.{{ language.alias }}}" class="bz-form-input ui-input  bz-field-localizable"/>
            <span style="position: absolute; top: 1px; right: 0">
                <span class="ico-flags {{ language.ico }} tooltip" title="{{ language.title }}"></span>
            </span>
        </div>
        {% endfor %}
    </div>
    
    <!--div class="bz-form-row">
        <label class="bz-form-label" for="${elementId}_name">{% tr %}Name{% endtr %}</label>
        <input type="text" name="field[${elementId}][name]" id="${elementId}_name" value="${field.name}" class="bz-form-input ui-input"/>
    </div-->
    <div class="product-type_field_type">
        <label class="bz-form-label" for="${elementId}_type">{% tr %}Type{% endtr %}</label>
        <select name="field[${elementId}][type]" id="${elementId}_type" class="field-type bz-form-input ui-input">
            {% for fieldType in fieldTypes|keys %}
            <option {{'{{'}}if field.type == '{{ fieldType }}' {{'}}'}}selected="selected"{{'{{'}}/if{{'}}'}} value="{{ fieldType }}">{{ fieldTypes[fieldType] }}</option>
            {% endfor %}
        </select>
        <div class="set-data" {{'{{'}}if field.type > 3{{'}}'}}style="display: block"{{'{{'}}/if{{'}}'}}>
            {{'{{'}}if field.data && field.data.length != 0 {{'}}'}}
                {{'{{'}}each(k, data) field.data{{'}}'}}
                <div class="set-value">
                    {{'{{'}}each(lang, val) data{{'}}'}}
                    <div class="product-fields_set_title without-flag ${lang}">
                        <input type="text" name="field[${elementId}][data][${k}][${lang}]" value="${val}" class="bz-form-input ui-input bz-field-localizable"/>
                    </div>
                    {{'{{'}}/each{{'}}'}}
                    <a class="set-remove-value" href="javascript: void(null);" title="{% tr %}Delete option{% endtr %}"><span class="ui-icon ui-icon-trash"></span></a>
                </div>
                {{'{{'}}/each{{'}}'}}
            {{'{{'}}/if{{'}}'}}
            <a class="set-add-value" rel="${elementId}" href="javascript: void(null);">{% tr %}Add an option{% endtr %}</a>
        </div>
    </div>
    <div class="product-type_field_checkboxes">
        <label class="bz-form-label" for="${elementId}_require">
            <input type="checkbox" name="field[${elementId}][require]" {{'{{'}}if field.require == '1' {{'}}'}}checked="checked"{{'{{'}}/if{{'}}'}}/>
            {% tr %}Required{% endtr %}
        </label>

        <label class="bz-form-label" for="${elementId}_published">
            <input type="checkbox" name="field[${elementId}][published]" {{'{{'}}if field.is_published == '1' {{'}}'}}checked="checked"{{'{{'}}/if{{'}}'}}/>
            {% tr %}Published{% endtr %}
        </label>

        <label class="bz-form-label" for="${elementId}_is_filter">
            <input type="checkbox" name="field[${elementId}][is_filter]" {{'{{'}}if field.is_filter == '1' {{'}}'}}checked="checked"{{'{{'}}/if{{'}}'}}/>
            {% tr %}Filter{% endtr %}
        </label>
    </div>
    <div class="spacer"></div>
</div>
</script>